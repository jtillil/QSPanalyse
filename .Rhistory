library(granger)
x = matrix(1:10, nrow = 5, byrow = T)
y = as.factor(c(0,0,1,1,1))
out = granger::ranger(x = x, y = y)
colnames(x)
colnames(x) = c("X1", "X2")
View(x)
out = granger::ranger(x = x, y = y)
View(out)
out = granger::ranger(x = x, y = y, importance = 'impurity')
out
View(out)
devtools::install_github("jtillil/granger")
devtools::install_github("jtillil/granger")
devtools::install_github("jtillil/goup_ranger")
devtools::install_github("jtillil/group_ranger")
devtools::install_github("jtillil/group_ranger")
devtools::install_github("jtillil/group_ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
force(ranger)
View(ranger)
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
View(ranger)
library(ranger)
devtools::install_github("jtillil/group_ranger")
devtools::install_github("jtillil/group_ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
force(ranger)
View(ranger)
x = matrix(1:10, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2)
)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity')
out$predictions
traceback()
out = ranger::ranger(x = x, y = y, importance = 'impurity')
traceback()
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
x = matrix(1:10, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2)
)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity')
out$predictions
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity')
x = matrix(1:10, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2)
)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity')
out$predictions
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
x = matrix(1:10, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2)
)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity')
out$predictions
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
x = matrix(1:10, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2)
)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity')
out$predictions
devtools::install_github("jtillil/group_ranger")
library(ranger)
x = matrix(1:10, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2)
)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity')
library(ranger)
x = matrix(1:10, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2)
)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
library(ranger)
x = matrix(1:20, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2", "X3", "X4")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2),
c(3)
)
out = ranger::ranger(x = x, y = y, importance = 'impurity')
out$predictions
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
#### Install
devtools::install_github("jtillil/group_ranger")
#### Library
library(ranger)
#### Data
x = matrix(1:20, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2", "X3", "X4")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2),
c(3)
)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
####
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
#### Remove
remove.packages("ranger")
#### Install
devtools::install_github("jtillil/group_ranger")
#### Library
library(ranger)
#### Library
library(ranger)
#### Data
x = matrix(1:20, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2", "X3", "X4")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2),
c(3)
)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
####
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
####
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = FALSE, groups = groups)
####
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = FALSE, groups = groups)
out$predictions
View(out)
####
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = T, groups = groups)
#### Remove
remove.packages("ranger")
detach{"ranger"}
detach("ranger")
unloadNamespace("ranger")
library(ranger)
#### Remove
unloadNamespace("ranger")
remove.packages("ranger")
#### Install
devtools::install_github("jtillil/group_ranger")
#### Library
library(ranger)
#### Data
x = matrix(1:20, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2", "X3", "X4")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2),
c(3)
)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = T, groups = groups)
#### Remove
unloadNamespace("ranger")
remove.packages("ranger")
#### Install
devtools::install_github("jtillil/group_ranger")
#### Library
library(ranger)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = T, groups = groups)
#### Remove
unloadNamespace("ranger")
remove.packages("ranger")
#### Install
devtools::install_github("jtillil/group_ranger")
#### Library
library(ranger)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = T, groups = groups)
#### Remove
unloadNamespace("ranger")
remove.packages("ranger")
#### Install
devtools::install_github("jtillil/group_ranger")
#### Library
library(ranger)
unloadNamespace("ranger")
remove.packages("ranger")
#### Reinstall
reinstall = function() {
unloadNamespace("ranger")
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
}
reinstall()
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = T, groups = groups)
#### Library
library(ranger)
#### Data
x = matrix(1:20, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2", "X3", "X4")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2),
c(3)
)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = T, groups = groups)
reinstall()
#### Reinstall
reinstall = function() {
unloadNamespace("ranger")
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
}
reinstall()
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = T, groups = groups)
View(reinstall)
#### Compile Attributes
Rcpp::compileAttributes(pkgdir = "/Users/jtm2/Documents/GitHub/group_ranger")
#### Reinstall
reinstall = function() {
unloadNamespace("ranger")
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
}
reinstall()
#### Data
x = matrix(1:20, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2", "X3", "X4")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2),
c(3)
)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = T, groups = groups)
#### Reinstall
reinstall = function() {
unloadNamespace("ranger")
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
}
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
#### Compile Attributes
Rcpp::compileAttributes(pkgdir = "/Users/jtm2/Documents/GitHub/group_ranger")
#### Reinstall Rcpp
install.packages("Rcpp")
install.packages("Rcpp")
#### Compile Attributes
Rcpp::compileAttributes(pkgdir = "/Users/jtm2/Documents/GitHub/group_ranger")
reinstall()
reinstall()
#### Compile Attributes
Rcpp::compileAttributes(pkgdir = "/Users/jtm2/Documents/GitHub/group_ranger")
reinstall()
#### Compile Attributes
Rcpp::compileAttributes(pkgdir = "/Users/jtm2/Documents/GitHub/group_ranger")
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
reinstall()
#### Library
library(ranger)
#### Data
x = matrix(1:20, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2", "X3", "X4")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2),
c(3)
)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
#### Predictions
out$predictions
#### Reinstall
reinstall = function() {
unloadNamespace("ranger")
remove.packages("ranger")
devtools::install_github("jtillil/group_ranger")
library(ranger)
}
reinstall()
reinstall()
#### Compile Attributes
Rcpp::compileAttributes(pkgdir = "/Users/jtm2/Documents/GitHub/group_ranger")
reinstall()
#### Data
x = matrix(1:20, nrow = 5, byrow = T)
colnames(x) = c("X1", "X2", "X3", "X4")
y = as.factor(c(0,0,1,1,1))
groups = list(
c(1),
c(1:2),
c(3)
)
#### No Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity')
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups)
reinstall()
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups, debug = TRUE)
reinstall()
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups,
debug = TRUE)
reinstall()
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups,
debug = TRUE)
reinstall()
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups,
debug = TRUE)
reinstall()
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups,
debug = TRUE)
reinstall()
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups,
debug = TRUE)
reinstall()
#### With Groups
out = ranger::ranger(x = x, y = y, importance = 'impurity',
use_grouped_variables = TRUE, groups = groups,
debug = TRUE)
reinstall()
#### Compile Attributes
Rcpp::compileAttributes(pkgdir = "/Users/jtm2/Documents/GitHub/group_ranger")
reinstall()
reinstall()
reinstall()
reinstall()
install.packages("tictoc")
1e5
source("~/Desktop/R/timing_random_nubers.R")
source("~/Desktop/R/timing_random_nubers.R")
source("~/Desktop/R/timing_random_nubers.R")
source("~/Desktop/R/timing_random_nubers.R")
install.packages("shiny")
install.packages("shiny")
2
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jtillil',
token='EFA4D794F7F31BC6C468A23F58A685A8',
secret='iM2jaeVtIQus7UnVKd9DUhLaZz5eGeB2GNB5OILF')
library(bslib)
ls
ls9)
ls()
source("~/Documents/GitHub/QSPanalyse/deploy_app.R")
getwd()
source("~/Documents/GitHub/QSPanalyse/deploy_app.R")
